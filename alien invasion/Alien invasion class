import pygame
from pygame.sprite import Sprite

class Alien(Sprite):
    def __init__(self, settings, screen):
        super().__init__()
        self.screen = screen
        self.settings = settings

        # Load the alien image and set its rect
        self.image = pygame.image.load('images/alien.png')
        self.rect = self.image.get 
import pygame
from pygame.sprite import Sprite

class Bullet(Sprite):
    def __init__(self, settings, screen, spaceship):
        super().__init__()
        self.screen = screen

        # Create a bullet rect at (0, 0) and then set its correct position.
        self.rect = pygame.Rect(0, 0, settings.bullet_width, settings.bullet_height)
        self.rect.centerx = spaceship.rect.centerx
        self.rect.top = spaceship.rect.top

        # Store the bullet's position as a float for smoother movement.
        self.y = float(self.rect.y)

        # Set the bullet's speed
        self.color = settings.bullet_color
        self.speed_factor = settings.bullet_speed_factor

    def update(self):
        """Move the bullet up the screen."""
        self.y -= self.speed_factor
        self.rect.y = self.y

    def draw_bullet(self):
        """Draw the bullet on the screen."""
        pygame.draw.rect(self.screen, self.color, self.rect)
import pygame
from bullet import Bullet
from alien import Alien

def check_events(settings, screen, spaceship, bullets):
    """Handle key presses and mouse events."""
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            quit()

        elif event.type == pygame.KEYDOWN:
            if event.key == pygame.K_RIGHT:
                spaceship.moving_right = True
            elif event.key == pygame.K_LEFT:
                spaceship.moving_left = True
            elif event.key == pygame.K_SPACE:
                fire_bullet(settings, screen, spaceship, bullets)

        elif event.type == pygame.KEYUP:
            if event.key == pygame.K_RIGHT:
                spaceship.moving_right = False
            elif event.key == pygame.K_LEFT:
                spaceship.moving_left = False

def fire_bullet(settings, screen, spaceship, bullets):
    """Create a new bullet and add it to the bullets group."""
    if len(bullets) < settings.bullets_allowed:
        new_bullet = Bullet(settings, screen, spaceship)
        bullets.add(new_bullet)

def update_bullets(bullets, aliens, screen, spaceship, scoreboard):
    """Update the position of bullets and check for collisions with aliens."""
    bullets.update()

    for bullet in bullets.copy():
        if bullet.rect.bottom <= 0:
            bullets.remove(bullet)

    check_bullet_alien_collisions(bullets, aliens, screen, spaceship, scoreboard)

def check_bullet_alien_collisions(bullets, aliens, screen, spaceship, scoreboard):
    """Check for bullet-alien collisions and update the score."""
    collisions = pygame.sprite.groupcollide(bullets, aliens, True, True)
    if collisions:
        for aliens in collisions.values():
            scoreboard.increase_score(len(aliens))

def update_aliens(aliens, spaceship, bullets, screen, scoreboard):
    """Update the position of the aliens and check for collisions with the spaceship."""
    aliens.update()

    if pygame.sprite.spritecollideany(spaceship, aliens):
        spaceship_hit(spaceship, bullets, aliens, scoreboard)

def spaceship_hit(spaceship, bullets, aliens, scoreboard):
    """Handle the event when the spaceship is hit by an alien."""
    if scoreboard.lives > 0:
        scoreboard.decrease_lives()
        aliens.empty()
        bullets.empty()

        # Reset the spaceship position
        spaceship.center_spaceship()
        create_fleet(settings, screen, aliens)

def create_fleet(settings, screen, aliens):
    """Create a full fleet of aliens."""
    alien = Alien(settings, screen)
    number_aliens_x = get_number_aliens_x(settings, alien.rect.width)
    number_rows = get_number_rows(settings, alien.rect.height)

    for row in range(number_rows):
        for alien_number in range(number_aliens_x):
            create_alien(settings, screen, aliens, alien_number, row)

def get_number_aliens_x(settings, alien_width):
    """Determine the number of aliens that fit in a row."""
    available_space_x = settings.screen_width - 2 * alien_width
    return available_space_x // (2 * alien_width)

def get_number_rows(settings, alien_height):
    """Determine the number of rows of aliens that fit on the screen."""
    available_space_y = settings.screen_height - 3 * alien_height
    return available_space_y // (2 * alien_height)

def create_alien(settings, screen, aliens, alien_number, row_number):
    """Create an alien and place it in the correct position."""
    alien = Alien(settings, screen)
    alien_width = alien.rect.width
    alien.rect.x = alien_width + 2 * alien_width * alien_number
    alien.rect.y = alien.rect.height + 2 * alien.rect.height * row_number
    aliens.add(alien)

def update_screen(settings, screen, spaceship, bullets, aliens, scoreboard):
    """Update the screen and redraw everything."""
    screen.fill(settings.bg_color)

    # Redraw all bullets and aliens
    for bullet in bullets.sprites():
        bullet.draw_bullet()

    spaceship.blitme()
    aliens.draw(screen)

    # Display the score
    scoreboard.show_score()

    # Make the most recently drawn screen visible
    pygame.display.flip() import pygame
from settings import Settings
from spaceship import Spaceship
from alien import Alien
from bullet import Bullet
from game_functions import check_events, update_screen, update_bullets, update_aliens, create_fleet
from scoreboard import Scoreboard

def run_game():
    # Initialize pygame and settings
    pygame.init()
    settings = Settings()
    screen = pygame.display.set_mode((settings.screen_width, settings.screen_height))
    pygame.display.set_caption("Alien Invasion")

    # Create a spaceship, a group of bullets, and a scoreboard
    spaceship = Spaceship(settings, screen)
    bullets = pygame.sprite.Group()
    aliens = pygame.sprite.Group()
    scoreboard = Scoreboard(settings, screen)

    # Create a fleet of aliens
    create_fleet(settings, screen, aliens)

    # Main game loop
    while True:
        check_events(settings, screen, spaceship, bullets)
        spaceship.update()
        update_bullets(bullets, aliens, screen, spaceship, scoreboard)
        update_aliens(aliens, spaceship, bullets, screen, scoreboard)
        update_screen(settings, screen, spaceship, bullets, aliens, scoreboard)

if __name__ == '__main__':
    run_game() class Settings:
    def __init__(self):
        """Initialize the game's settings."""
        self.screen_width = 1200
        self.screen_height = 800
        self.bg_color = (230, 230, 230)

        self.ship_speed_factor = 1.5
        self.bullet_speed_factor = 1
        self.bullet_width = 3
        self.bullet_height = 15
        self.bullet_color = (60, 60, 60)
        self.bullets_allowed = 3

        self.alien_speed_factor = 1
        self.fleet_drop_speed = 10

        self.speedup_scale = 1.1
        self.score_scale = 1.5

        self.initialize_dynamic_settings()

    def initialize_dynamic_settings(self):
        """Initialize settings that change during the game."""
        self.ship_speed_factor = 1.5
        self.bullet_speed_factor = 1
        self.alien_speed_factor = 1

        self.fleet_direction = 1  # 1 represents right; -1 represents leftmport pygame

class Spaceship(pygame.sprite.Sprite):
    def __init__(self, settings, screen):
        super().__init__()
        self.screen = screen
        self.settings = settings

        # Load the spaceship image and set its rect
        self.image = pygame.image.load('images/spaceship.png')
        self.rect = self.image.get_rect()
        self.screen_rect = screen.get_rect()

        # Start the spaceship at the center bottom of the screen
        self.rect.centerx = self.screen_rect.centerx
        self.rect.bottom = self.screen_rect.bottom

        self.center = float(self.rect.centerx)
        self.moving_right = False
        self.moving_left = False

    def update(self):
        """Update the spaceship's position based on movement flags."""
        if self.moving_right and self.rect.right < self.screen_rect.right:
            self.center += self.settings.ship_speed_factor
        if self.moving_left and self.rect.left > 0:
            self.center -= self.settings.ship_speed_factor

        self.rect.centerx = self.center

    def blitme(self):
        """Draw the spaceship at its current location."""
        self.screen.blit(self.image, self.rect)

    def center_spaceship(self):
        """Center the spaceship on the screen."""
        self.center = self.screen_rect.centerx
        self.rect.centerx = self.center
